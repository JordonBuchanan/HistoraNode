var express         = require("express"),
     app            = express(),
     bodyParser     = require("body-parser"),
     nodemailer     = require("nodemailer"),
     methodOverride = require("method-override"),
     session        = require("express-session"),
     LocalStrategy  = require("passport-local"),
     cookieParser   = require("cookie-parser"),
     mongoose       = require("mongoose"),
     passport       = require("passport"),
     Comment        = require('./models/comment'),
     User           = require('./models/user');
     flash          = require("connect-flash");
     multer         = require('multer');



app.use(bodyParser.urlencoded({extended: true}));
app.use(express.static(__dirname + '/Views/public'));
app.set('views', __dirname + '/Views');
app.use(express.static('files'));
app.use(methodOverride('_method'));
app.use(flash());
app.use(cookieParser('secret'));
app.set("view engine", "ejs");

//IMAGE UPLOADER
var storage = multer.diskStorage({
  filename: function(req, file, callback) {
    callback(null, Date.now() + file.originalname);
  }
});
var imageFilter = function (req, file, cb) {
    // accept image files only
    if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
        return cb(new Error('Only image files are allowed!'), false);
    }
    cb(null, true);
};
var upload = multer({ storage: storage, fileFilter: imageFilter})

var cloudinary = require('cloudinary');
cloudinary.config({ 
  cloud_name: 'dumxfw6s6', 
  api_key: 772524293964862, 
  api_secret: 'Jg_RcHyalHfmPq1zFhH74UvNMSQ'
});

// PASSPORT CONFIGURATION
app.locals.moment = require('moment');
app.use(require("express-session")({
    secret: "CharlesMartell",
    resave: false,
    saveUninitialized: false
}));

app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
app.use(function(req, res, next){
    res.locals.currentUser = req.user;
    res.locals.error = req.flash("error");
    res.locals.success = req.flash("success");
    next();
 });


//SCHEMA SETUP
//mongoose.connect('mongodb://localhost/histora');
mongoose.connect("mongodb://Jordon:gracie14@ds139950.mlab.com:39950/jtodo");
mongoose.Promise = global.Promise;
var db = mongoose.connection;
var PostSchema = new mongoose.Schema({
    name: String,
    createdAt: { type: Date, default: Date.now },
    image: String,
    textField: String,
    author:{
        id:{
            type: mongoose.Schema.Types.ObjectId,
            ref: "User"
        },
        username: String
    },
    comments: [
        {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Comment"
        }
    ]
});
var Post = mongoose.model("Post", PostSchema);
//mongoose.set('debug', true);
process.on('unhandledRejection', (reason, p) => {
    console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);
    // application specific logging, throwing an error, or other logic here
  });

//==================
//GET ROUTES
//==================

app.get("/", function(req, res){
    res.render("Home.ejs");
});

app.get("/Forum/new", isLoggedIn, function(req, res){
    res.render("new.ejs")
});

app.get("/Forum", function(req, res){
    Post.find({}, function(err, allPost){
        if(err){
            req.flash("error", "Error");
            console.log(err);
        } else {
            res.render("Forum", {Post:allPost});
        }
    });
});

app.get("/Forum/:id", isLoggedIn, function(req, res){
    Post.findById(req.params.id).populate("comments").exec(function(err, foundPost){
        if(err){
            req.flash("error", "Post Doesn't Exist");
            console.log(err);
        } else{
            res.render("show", {Post: foundPost});
        }
    })
});

app.get("/Forum/:id/edit", checkPostOwn, isLoggedIn, function(req, res){
    Post.findById(req.params.id, function(err, foundPost){
        res.render("edit", {Post: foundPost});
    });
});

app.put("/Forum/:id",checkPostOwn, isLoggedIn, function(req, res){
    Post.findByIdAndUpdate(req.params.id, req.body.Post, function(err, updatedPost){
        if(err){
            req.flash("error", "Error");
            res.redirect("/Forum");
        } else {
            req.flash("success", "Edit Successful");
            res.redirect("/Forum/" + req.params.id);
        }
    });
});

app.delete("/Forum/:id",checkPostOwn, isLoggedIn, function(req, res){
    Post.findByIdAndRemove(req.params.id, function(err){
        if(err){
            req.flash("error", "Error");
            res.redirect("/Forum");
        }else{
            req.flash("success", "Post Deleted");
            res.redirect("/Forum");
        }
    });
});

//===================
//POST ROUTES
//===================

app.post("/Forum", isLoggedIn, upload.single('image'), function(req, res){
    cloudinary.uploader.upload(req.file.path, function(result) {
    var name = req.body.name;
    var image = req.body.image = result.secure_url;
    var textField = req.body.textField;    
    
    var author = {
        id: req.user._id,
        username: req.user.username
    }
    var newPost = {name: name, image: image, textField: textField, author:author};

    Post.create(newPost, function(err, newlyCreated){
        if(err){
            req.flash("error", "Error");
            console.log(err);
        } else{
            req.flash("success", "Post Created");
            res.redirect("/Forum");
        }
    });
});
});

//===============
//COMMENT ROUTES
//==============

app.get("/Forum/:id/newcomment", isLoggedIn, function(req, res){
    Post.findById(req.params.id, function(err, Post){
        if(err){                    
            req.flash("error", "Access Denied");
            console.log(err);
        } else{
            res.render("newcomment", {Post: Post});
        }
    }); 
});

app.post("/Forum/:id/comments", isLoggedIn, function(req,res){
    Post.findById(req.params.id, function(err, Post){
        if(err){
            console.log(err);
            res.redirect("/Forum");
        }else {
            Comment.create(req.body.comment, function(err, comment){
                if(err){
                    req.flash("error", "Error");
                    console.log(err);
                } else{
                    comment.author.id = req.user._id;
                    comment.author.username = req.user.username;
                    comment.save();
                    Post.comments.unshift(comment);
                    Post.save();
                    req.flash("success", "Comment Added");
                    res.redirect("/Forum/" + Post._id);
                }
            });
        }
    });
});

app.get("/Forum/:id/comments/:comment_id/editcomment", checkCommentOwn, function(req, res){
    Comment.findById(req.params.comment_id, function(err, foundComment){
        if(err){
            res.redirect("back");
        } else {
            res.render("editcomment", {Post_id: req.params.id, comment: foundComment});
        }
    });
});

app.put("/Forum/:id/comments/:comment_id", checkCommentOwn, function(req, res){
    Comment.findByIdAndUpdate(req.params.comment_id, req.body.comment, function(err, UpdatedComments){
        if(err){
            req.flash("error", "error");
            res.redirect("back");
        } else {
            req.flash("success", "Comment Edit Successful");
            res.redirect("/Forum/" + req.params.id);
        }
    });
});

app.delete("/Forum/:id/comments/:comment_id", checkCommentOwn, function(req, res){
    Comment.findByIdAndRemove(req.params.comment_id, function(err){
        if(err){
            req.flash("error", "Error");
            res.redirect("back");
        } else {
            req.flash("success", "Comment Deleted");
            res.redirect("back");
        }
    });
});

//================
//AUTH ROUTE
//================

app.post("/register", function(req, res){
    var newUser = new User(
        {
            username: req.body.username,
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            website: req.body.website,
            email: req.body.email,
            biography: req.body.biography
        });
    if(req.body.adminCode === '2063'){
        newUser.isAdmin = true;
    }
    User.register(newUser, req.body.password, function(err, user){
       if(err){
            req.flash("error", err.message);
            return res.render("Home");
       }
       passport.authenticate("local")(req, res, function(){
          req.flash("success", "Successfully Registered");
          res.redirect("/Forum");
       });
    });
});

app.post("/login", passport.authenticate("local", 
    {
        successRedirect: "/Forum",
        failureRedirect: "/"
    }), function(req, res){
});

app.get("/logout", function(req, res){
    req.logout();
    req.flash("success", "Logged Out");
    res.redirect("/");
});

app.get("/users/:id", isLoggedIn, function(req, res){
    User.findById(req.params.id, function(err, foundUser){
        if(err){
            console.log(err);
            res.redirect("/");
        }
        Post.find().where('author.id').equals(foundUser._id).exec(function(err, posts){
           if(err) {
               console.log(err);
               res.redirect("/");
           }
        res.render("users/show", {user: foundUser, posts: posts});
        });
    });
});

function isLoggedIn(req, res, next){
    if(req.isAuthenticated()){
        return next();
    }
    req.flash("error", "Please Sign In First");
    res.redirect("/");
}

function checkPostOwn(req, res, next){
    if(req.isAuthenticated()){
        Post.findById(req.params.id, function(err, foundPost){
           if(err){
               req.flash("error", "Post Not Found");
               res.redirect("back");
           } else {
              if(foundPost.author.id.equals(req.user._id) || req.user.isAdmin){
                  next();
              } else {
                req.flash("error", "Permission Denied");
                res.redirect("back");
              }
           }
        });
    } else {
        req.flash("error", "Please Sign In First");
        res.redirect("back");
    }
}
function checkCommentOwn(req, res, next){
    if(req.isAuthenticated()){
        Comment.findById(req.params.comment_id, function(err, foundComment){
           if(err){
               req.flash("error", "Comment Not Found");
               res.redirect("back");
           } else {
              if(foundComment.author.id.equals(req.user._id) || req.user.isAdmin){
                  next();
              } else {
                  req.flash("error", "Permission Denied");
                  res.redirect("back");
              }
           }
        });
    } else {
        req.flash("error", "Please Sign In First");
        res.redirect("back");
    }
}


//================
//ALL ROUTE
//================

app.get("*", function(req, res){
    res.render("all.ejs")
});

//================
//LISTEN
//================

var server     =    app.listen(process.env.PORT || 3000,function(){
    console.log("We have started our server on port 3000");
});